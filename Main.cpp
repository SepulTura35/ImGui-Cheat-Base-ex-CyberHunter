#include <windows.h>
#include <d3d9.h>
#include <d3dx9.h>
#include <iostream>
#include <fstream>
#include <vector>

#include "ImGui/imgui.h"
#include "ImGui/imgui_internal.h"
#include "ImGui/imgui_impl_dx9.h"
#include "ImGui/imgui_impl_win32.h"

#include "rawData.h"
#include "Detours.h"
#include "Hook.h"
#include "Variables.h"
#include "Functions.h"

#include <process.h>
#include <chrono>

#pragma comment (lib, "d3dx9.lib")
#pragma comment (lib, "d3d9.lib")

#pragma comment(lib, "legacy_stdio_definitions.lib")

using namespace std;
namespace bytes
{
	BYTE settings[] = { 0x89, 0x50, 0x4E, 0x47, 0xD, 0xA, 0x1A, 0xA, 0x0, 0x0, 0x0, 0xD, 0x49, 0x48, 0x44, 0x52, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x18, 0x8, 0x6, 0x0, 0x0, 0x0, 0xE0, 0x77, 0x3D, 0xF8, 0x0, 0x0, 0x0, 0x6, 0x62, 0x4B, 0x47, 0x44, 0x0, 0xFF, 0x0, 0xFF, 0x0, 0xFF, 0xA0, 0xBD, 0xA7, 0x93, 0x0, 0x0, 0x2, 0xF, 0x49, 0x44, 0x41, 0x54, 0x48, 0x89, 0xE5, 0x94, 0xBD, 0x6B, 0x13, 0x61, 0x1C, 0xC7, 0x3F, 0xBF, 0x4B, 0x6A, 0xA4, 0x36, 0x77, 0x97, 0xE6, 0x45, 0x10, 0x5, 0x27, 0x85, 0xBA, 0xD4, 0xA5, 0xE2, 0xD4, 0x4, 0x7, 0x7, 0x17, 0x5, 0x95, 0x82, 0x8B, 0x8E, 0x5D, 0x14, 0x71, 0x90, 0xFA, 0x87, 0xB8, 0xEA, 0x22, 0x74, 0xCC, 0xE2, 0xDC, 0xD6, 0x4D, 0x17, 0xED, 0x52, 0xC8, 0x26, 0x38, 0x19, 0xF2, 0x34, 0x77, 0x97, 0x9A, 0x42, 0x92, 0xE6, 0xE7, 0x60, 0x93, 0x5E, 0xEE, 0xA5, 0x89, 0x88, 0x8B, 0x7E, 0xE1, 0xE0, 0xEE, 0xFB, 0x7C, 0x5F, 0x9E, 0xE3, 0x79, 0x81, 0xFF, 0x2, 0xA6, 0xED, 0x3F, 0x6B, 0x79, 0xBE, 0x4E, 0x3C, 0xBE, 0xFF, 0x74, 0x16, 0xAF, 0x35, 0x8B, 0x48, 0x2D, 0xAE, 0x27, 0xD0, 0x49, 0xDC, 0xEF, 0x17, 0x18, 0xD3, 0xB9, 0x86, 0xB2, 0x1A, 0x6F, 0xA5, 0x6A, 0x3A, 0x9D, 0xA5, 0x69, 0x7E, 0x99, 0xF0, 0xA8, 0xCA, 0xBE, 0xEF, 0x6F, 0x2B, 0xB4, 0x4, 0x36, 0x15, 0xA9, 0x2, 0xEB, 0x51, 0xDD, 0x44, 0x8D, 0xF2, 0x5A, 0x44, 0x77, 0x14, 0xD6, 0x44, 0xA4, 0xBC, 0x68, 0xDB, 0x55, 0x11, 0x19, 0x26, 0x16, 0xB4, 0xDA, 0xC1, 0x63, 0x44, 0xDF, 0x4C, 0x9B, 0xD5, 0xA9, 0x50, 0x79, 0x52, 0x2A, 0xD8, 0x6F, 0x63, 0x5, 0xCD, 0x66, 0x73, 0xC1, 0xCA, 0xE5, 0x1A, 0x28, 0x17, 0xFE, 0xA8, 0x0, 0xBE, 0xCB, 0xD1, 0xE0, 0x4A, 0xB1, 0x58, 0xC, 0x20, 0xB4, 0x6, 0xD6, 0x99, 0xB3, 0xAF, 0x4E, 0x9, 0xFF, 0x26, 0xE8, 0x7D, 0xED, 0xF7, 0x6C, 0xED, 0xF7, 0x6C, 0x54, 0xEE, 0x1, 0x8D, 0x14, 0xED, 0x79, 0xCD, 0xCC, 0x6D, 0x8C, 0x3E, 0xB2, 0x63, 0x5A, 0xF9, 0x84, 0xD0, 0x5, 0xE6, 0xA3, 0xE1, 0x73, 0xC2, 0xB2, 0xE3, 0xB8, 0xFB, 0x21, 0xAE, 0xEE, 0x79, 0xDE, 0xCE, 0x0, 0xD9, 0x5, 0x2E, 0x45, 0xF4, 0x5D, 0x94, 0x8F, 0xE3, 0x89, 0x8F, 0x5E, 0x4A, 0x5, 0xBB, 0x8E, 0x50, 0x3, 0x3D, 0xC, 0xAB, 0x5, 0x7D, 0xEE, 0x38, 0x4E, 0x38, 0x1C, 0x0, 0xD7, 0x75, 0xDB, 0x82, 0xBE, 0x98, 0x64, 0xF5, 0x10, 0xA1, 0x56, 0x2A, 0xD8, 0xF5, 0x13, 0x7F, 0x4, 0x2D, 0xCF, 0x3F, 0x0, 0xCE, 0x8D, 0x2D, 0xFD, 0x9E, 0x5D, 0x2E, 0x97, 0x3B, 0x51, 0x1D, 0x80, 0x31, 0xC6, 0xD6, 0x4C, 0xD6, 0xF, 0x51, 0x3F, 0x4A, 0xAE, 0xB3, 0x10, 0xD6, 0xCC, 0x74, 0xD0, 0xD2, 0x20, 0x22, 0x69, 0xDB, 0x37, 0xB9, 0xA0, 0xE5, 0xFB, 0x2B, 0xA0, 0x13, 0x9C, 0x64, 0x73, 0xB7, 0xD2, 0xCC, 0x6A, 0x59, 0xB7, 0xA3, 0xCC, 0xAF, 0x8C, 0x90, 0x7F, 0x1C, 0xDE, 0xE, 0xEE, 0x22, 0xFA, 0x8E, 0xF8, 0x22, 0x37, 0xB2, 0xE8, 0x4D, 0xD7, 0x75, 0xDB, 0x61, 0x32, 0x8, 0x82, 0x62, 0x6F, 0xC8, 0x17, 0xD0, 0x8B, 0x11, 0x7D, 0x17, 0x95, 0x47, 0xA3, 0x75, 0x38, 0x99, 0xAD, 0xB0, 0x92, 0x10, 0xE, 0x70, 0x75, 0x80, 0xEC, 0x1A, 0xCF, 0x7B, 0x60, 0x8C, 0xB1, 0x8D, 0x31, 0xB6, 0xF1, 0xBC, 0x87, 0x29, 0xE1, 0x0, 0xF3, 0x8, 0x37, 0x62, 0x7F, 0xF0, 0xD7, 0xF, 0x5A, 0xA5, 0x52, 0x39, 0x60, 0xC8, 0x46, 0xBA, 0x6F, 0x46, 0xA8, 0xBC, 0x1C, 0x85, 0x43, 0xC2, 0x65, 0x67, 0x7C, 0x7F, 0xB, 0x30, 0x2, 0x9B, 0xAA, 0xB2, 0x8A, 0xB0, 0x4E, 0xFA, 0x6E, 0x1B, 0x1E, 0x5F, 0x76, 0x1F, 0x14, 0xD6, 0x4, 0x4A, 0x8B, 0x8E, 0x53, 0x4B, 0xBD, 0xEC, 0x92, 0x60, 0x3A, 0x9D, 0x25, 0x3D, 0x1A, 0xBE, 0x7, 0x2E, 0x47, 0x86, 0xBE, 0x4A, 0xC6, 0xBA, 0x53, 0xCC, 0xE7, 0xF7, 0x4E, 0xF3, 0x4F, 0x3D, 0x7, 0xC5, 0x7C, 0x7E, 0xF, 0x61, 0x3B, 0x3E, 0xA2, 0x5B, 0xD3, 0xC2, 0x67, 0x2A, 0x38, 0xC6, 0xE7, 0x18, 0x23, 0x12, 0xE7, 0xFE, 0x49, 0xFC, 0x4, 0x65, 0x42, 0xD3, 0xDF, 0x16, 0x46, 0x85, 0x2B, 0x0, 0x0, 0x0, 0x0, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
	BYTE aimimg[] = { 0x89, 0x50, 0x4E, 0x47, 0xD, 0xA, 0x1A, 0xA, 0x0, 0x0, 0x0, 0xD, 0x49, 0x48, 0x44, 0x52, 0x0, 0x0, 0x0, 0x1A, 0x0, 0x0, 0x0, 0x1A, 0x8, 0x6, 0x0, 0x0, 0x0, 0xA9, 0x4A, 0x4C, 0xCE, 0x0, 0x0, 0x0, 0x6, 0x62, 0x4B, 0x47, 0x44, 0x0, 0xFF, 0x0, 0xFF, 0x0, 0xFF, 0xA0, 0xBD, 0xA7, 0x93, 0x0, 0x0, 0x2, 0xDE, 0x49, 0x44, 0x41, 0x54, 0x48, 0x89, 0x9D, 0x96, 0xCF, 0x4F, 0x13, 0x41, 0x14, 0xC7, 0xBF, 0x6F, 0xB6, 0x2D, 0x10, 0x5B, 0xDA, 0x58, 0x68, 0x40, 0x2F, 0x9E, 0x24, 0x6, 0xC, 0x5E, 0xF4, 0x60, 0xA2, 0x82, 0x47, 0x88, 0x7, 0x3, 0x7F, 0x3, 0x9A, 0x6A, 0x62, 0x4C, 0x4C, 0x3C, 0x18, 0x2F, 0x84, 0xA3, 0x7, 0x8D, 0x31, 0x31, 0xC4, 0x7F, 0x1, 0xA2, 0x7, 0xCE, 0xA8, 0x10, 0x41, 0x39, 0x58, 0xC1, 0x18, 0x38, 0x79, 0x31, 0xA6, 0xE9, 0x6E, 0xE9, 0x4C, 0x4B, 0xD3, 0xC6, 0x2E, 0xFB, 0x3C, 0xB0, 0x3B, 0x2C, 0x2D, 0xFD, 0xB1, 0x7D, 0xC9, 0x26, 0x33, 0x3B, 0xF3, 0xBE, 0x9F, 0x97, 0xF7, 0x76, 0xDF, 0xC, 0x10, 0xD0, 0xF2, 0x52, 0x7E, 0xB2, 0xA4, 0xDA, 0xA, 0xEA, 0x17, 0xA, 0xEA, 0xC0, 0xA0, 0x9B, 0x41, 0x7D, 0x0, 0x80, 0xDA, 0x6D, 0xC8, 0xE5, 0x72, 0x51, 0x11, 0xEE, 0x9D, 0x5, 0x61, 0xA, 0xE0, 0x71, 0x0, 0x17, 0xDD, 0xA5, 0x3D, 0x80, 0xB6, 0xC1, 0x58, 0x71, 0x6A, 0xD5, 0xA5, 0x54, 0x2A, 0x75, 0xD0, 0x15, 0x88, 0x99, 0x23, 0x79, 0xA5, 0x1E, 0x3, 0xF4, 0xC, 0x40, 0xAC, 0x4D, 0x3C, 0x45, 0x6, 0x2D, 0xC, 0xC4, 0x63, 0xAF, 0x88, 0xE8, 0x5F, 0xC7, 0x20, 0xB3, 0x5C, 0x1E, 0xA6, 0x9A, 0xFD, 0x1, 0xC0, 0xD5, 0x36, 0x80, 0x7A, 0xB1, 0xC, 0xE, 0xED, 0x3B, 0xC9, 0x64, 0xF2, 0x4F, 0xFD, 0x9A, 0x68, 0x80, 0x98, 0xE5, 0x73, 0x54, 0xB3, 0x37, 0xFD, 0x10, 0x2, 0x32, 0x0, 0xA7, 0xC9, 0x10, 0xA3, 0xFA, 0x9D, 0x21, 0x46, 0x41, 0x78, 0xC0, 0xA0, 0x1F, 0xDE, 0x3B, 0x6, 0xAE, 0xB0, 0x11, 0x5A, 0x33, 0xCB, 0xE5, 0xE1, 0x96, 0x11, 0x31, 0x73, 0xC4, 0x92, 0x6A, 0xCB, 0x92, 0x8A, 0xDD, 0xA7, 0x62, 0x4A, 0x39, 0xC7, 0xCC, 0x3A, 0x20, 0x53, 0xA9, 0xB5, 0xBC, 0x52, 0x9F, 0x7D, 0x3E, 0xC2, 0x94, 0xF2, 0xBE, 0x25, 0x55, 0xD5, 0xE7, 0xF7, 0x95, 0x99, 0x23, 0x4D, 0x41, 0x96, 0x94, 0x4F, 0x4F, 0x40, 0xA, 0xA5, 0x5B, 0x2D, 0x23, 0xF3, 0x67, 0xA2, 0x50, 0x98, 0xF0, 0xC3, 0x4C, 0x59, 0x7C, 0xE2, 0x5F, 0xD7, 0x35, 0xCA, 0xE5, 0x72, 0x51, 0x11, 0xE9, 0xF9, 0xB, 0xB7, 0xF0, 0xC, 0xBE, 0x37, 0x98, 0x48, 0x2C, 0x76, 0xA, 0x2, 0x0, 0x4B, 0xA9, 0x34, 0x18, 0x6F, 0xDC, 0xA9, 0xB2, 0xAB, 0x95, 0xF3, 0x43, 0x43, 0x43, 0x65, 0xC0, 0x57, 0x23, 0x11, 0xEE, 0x9D, 0xF5, 0x20, 0x4, 0x64, 0x6, 0xE2, 0xF1, 0x77, 0x41, 0x20, 0x0, 0x90, 0xEC, 0xEF, 0x7F, 0xB, 0xF0, 0x8E, 0x3B, 0x8D, 0x87, 0x7A, 0xFA, 0x66, 0xB4, 0xBE, 0xDE, 0x45, 0x98, 0xF2, 0x86, 0xC, 0x5E, 0x24, 0x22, 0x27, 0x28, 0x88, 0x88, 0x1C, 0x10, 0xE9, 0x2C, 0x30, 0x61, 0xBA, 0x11, 0x74, 0xF4, 0x33, 0x1E, 0x99, 0x61, 0x7C, 0xC, 0xA, 0xD1, 0x30, 0x5B, 0xAC, 0xEA, 0x31, 0xA0, 0x35, 0xC9, 0x94, 0xC5, 0xC, 0xF9, 0x21, 0xC7, 0xD1, 0xAC, 0xF, 0xC6, 0xE3, 0x37, 0x3A, 0x5, 0x30, 0x33, 0x59, 0xAA, 0xF4, 0xBD, 0x99, 0x96, 0x20, 0xF0, 0xA9, 0x29, 0x12, 0x0, 0x77, 0xA, 0x71, 0x8D, 0x5A, 0x69, 0xE9, 0xAF, 0xCE, 0x92, 0x6A, 0x17, 0xC0, 0x8, 0x70, 0xF4, 0x33, 0x26, 0x63, 0xB1, 0x5F, 0x1, 0x41, 0x0, 0x80, 0xFD, 0xFD, 0xD2, 0x98, 0x23, 0x1C, 0xEF, 0x83, 0xD8, 0x1D, 0x48, 0xC4, 0x2F, 0xB9, 0x30, 0x1D, 0xD0, 0xB6, 0x37, 0x62, 0xC7, 0x99, 0xE8, 0x6, 0x2, 0x0, 0x8E, 0xE1, 0x4C, 0x6A, 0x1D, 0x40, 0x77, 0x8D, 0x63, 0x10, 0x63, 0x45, 0xF, 0x99, 0x4E, 0x74, 0x83, 0x4E, 0x8D, 0x99, 0x5, 0x98, 0xE7, 0xBC, 0x39, 0xD1, 0xB1, 0xA6, 0x16, 0x73, 0x6A, 0xD5, 0x25, 0x0, 0x45, 0x0, 0x20, 0xF0, 0xB8, 0xA5, 0xD4, 0x1C, 0x2, 0x5A, 0xBE, 0x58, 0x4C, 0x3, 0x34, 0xE6, 0x4E, 0x95, 0x5D, 0xA9, 0x2C, 0x37, 0x80, 0x52, 0xA9, 0xD4, 0x1, 0x83, 0x16, 0x74, 0x34, 0xA0, 0x97, 0x66, 0xA1, 0xD0, 0x71, 0xA, 0x2D, 0x29, 0x6F, 0x83, 0xF1, 0x42, 0xFB, 0x33, 0xCD, 0x7B, 0x5D, 0xA1, 0xC1, 0xDC, 0xA6, 0xFA, 0xCD, 0xD7, 0xEF, 0xAA, 0x96, 0x52, 0x69, 0x7F, 0x1A, 0xDD, 0xA3, 0x7C, 0xC3, 0xE7, 0x23, 0x2C, 0xA5, 0x1E, 0xD6, 0x35, 0xD5, 0xD, 0x66, 0xE, 0xFB, 0xB5, 0x1B, 0xCE, 0x23, 0xF7, 0x2C, 0xFA, 0x2, 0xE0, 0x82, 0x2F, 0x84, 0x1D, 0x10, 0x2D, 0x92, 0x2D, 0x56, 0xD9, 0x70, 0x7E, 0x2, 0x0, 0x1D, 0x8A, 0x31, 0xE, 0x39, 0x93, 0x47, 0x35, 0xA1, 0xCB, 0x7A, 0x27, 0xF0, 0x9B, 0x43, 0xC6, 0xF5, 0x54, 0x34, 0x9A, 0x6D, 0x9, 0xF2, 0xC1, 0xDE, 0x3, 0xB8, 0xD6, 0x24, 0x53, 0xCD, 0x6C, 0xD3, 0x9, 0x19, 0x77, 0xEB, 0x21, 0x4D, 0x41, 0x0, 0xC0, 0xCC, 0x61, 0x4B, 0x95, 0x1E, 0x11, 0xF8, 0x39, 0x80, 0xFE, 0x36, 0x0, 0x45, 0x4C, 0xF3, 0x67, 0x13, 0xB1, 0xD7, 0x44, 0x54, 0x3B, 0x6D, 0x43, 0xDB, 0xCB, 0x49, 0x36, 0x9B, 0x3D, 0x13, 0xEA, 0xE9, 0x9B, 0x61, 0xC2, 0xB4, 0xDB, 0xBB, 0x46, 0xDC, 0xA5, 0x3D, 0x6, 0x32, 0x44, 0x58, 0xB1, 0x2B, 0x95, 0xE5, 0xA6, 0x85, 0xEF, 0xD6, 0xBC, 0x82, 0x7, 0xF5, 0xB, 0x7E, 0xAF, 0x23, 0xAC, 0x77, 0xD1, 0x7, 0xF1, 0x1F, 0x27, 0x75, 0x88, 0x9, 0x2F, 0x3A, 0x34, 0x20, 0x0, 0x0, 0x0, 0x0, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
	BYTE eyeimg[] = { 0x89, 0x50, 0x4E, 0x47, 0xD, 0xA, 0x1A, 0xA, 0x0, 0x0, 0x0, 0xD, 0x49, 0x48, 0x44, 0x52, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0, 0x18, 0x8, 0x6, 0x0, 0x0, 0x0, 0xE0, 0x77, 0x3D, 0xF8, 0x0, 0x0, 0x0, 0x6, 0x62, 0x4B, 0x47, 0x44, 0x0, 0xFF, 0x0, 0xFF, 0x0, 0xFF, 0xA0, 0xBD, 0xA7, 0x93, 0x0, 0x0, 0x2, 0x42, 0x49, 0x44, 0x41, 0x54, 0x48, 0x89, 0xED, 0x94, 0xC1, 0x4E, 0x13, 0x51, 0x14, 0x86, 0xBF, 0x73, 0x69, 0x6B, 0x48, 0x60, 0x66, 0x4A, 0x8B, 0x51, 0x23, 0x91, 0x85, 0xB8, 0x74, 0x23, 0x18, 0x37, 0x24, 0xBA, 0x36, 0x2, 0x3E, 0x80, 0x2F, 0x81, 0x89, 0x10, 0x30, 0x9A, 0x68, 0x44, 0xBA, 0x81, 0x27, 0x30, 0x26, 0xFA, 0x0, 0xB6, 0x81, 0x27, 0x70, 0xE1, 0xA6, 0xBA, 0xD0, 0xAD, 0x24, 0x90, 0x54, 0xD1, 0xC0, 0x14, 0x66, 0xA6, 0x24, 0x25, 0x30, 0xCC, 0x71, 0xD1, 0x82, 0x74, 0x3A, 0x5A, 0x5C, 0x18, 0x36, 0xFC, 0xAB, 0x7B, 0xCF, 0x39, 0xF7, 0xFF, 0xFF, 0x73, 0x73, 0x72, 0xE0, 0xC, 0xA7, 0xD, 0xF9, 0x5B, 0xD2, 0xF7, 0xFD, 0xBE, 0x50, 0xE5, 0xBE, 0x8A, 0x8E, 0xA3, 0x5C, 0x5, 0x6, 0x9A, 0xA9, 0xA, 0xC2, 0x8A, 0x44, 0x52, 0x4C, 0x19, 0x2D, 0xDA, 0xB6, 0xBD, 0xF5, 0x4F, 0x2, 0x95, 0x8A, 0x76, 0x77, 0x5B, 0xC1, 0x43, 0x94, 0x29, 0xA0, 0xA7, 0x83, 0xC9, 0x1D, 0xD0, 0xF9, 0x7A, 0xCD, 0x5E, 0x18, 0x18, 0x90, 0x7A, 0x47, 0x81, 0x6A, 0xB5, 0x7A, 0x59, 0xBB, 0x52, 0x45, 0xE0, 0x46, 0x7, 0xE2, 0x16, 0x28, 0xF2, 0x25, 0x4D, 0x34, 0xE1, 0x38, 0xCE, 0xEA, 0xF1, 0xB8, 0x39, 0x7E, 0xD9, 0xC, 0x82, 0x6B, 0xDA, 0x95, 0x2A, 0xB7, 0x91, 0xB, 0x25, 0x55, 0x73, 0x3B, 0xDC, 0xAD, 0xF7, 0x84, 0xBB, 0xF5, 0x1E, 0xD5, 0xE8, 0xE, 0xC2, 0x52, 0x6B, 0x89, 0x5E, 0xF, 0x91, 0xF, 0x1B, 0xBE, 0x3F, 0x94, 0xD8, 0xC1, 0x8F, 0x5A, 0xAD, 0x3F, 0x7D, 0x10, 0x95, 0x81, 0x2B, 0x31, 0x6F, 0xD3, 0x79, 0xC7, 0x29, 0x24, 0xB9, 0x76, 0x3D, 0x6F, 0x6, 0xE4, 0x45, 0x2C, 0xBC, 0x96, 0x31, 0x32, 0x62, 0x59, 0x96, 0xDB, 0xD2, 0x41, 0x26, 0x8C, 0x5E, 0xB7, 0x91, 0xB, 0xA5, 0xBC, 0xE3, 0x14, 0x54, 0x35, 0xE3, 0x7A, 0x5E, 0xC1, 0xDD, 0xF6, 0xD7, 0x5D, 0xDF, 0xFF, 0xEE, 0x7A, 0xC1, 0xBC, 0xAA, 0x66, 0xF2, 0x8E, 0x33, 0x87, 0xB2, 0x1C, 0x13, 0x18, 0xDC, 0x53, 0x7D, 0x75, 0x78, 0x31, 0x0, 0x9B, 0xDB, 0xC1, 0x98, 0xA, 0x77, 0xE3, 0xE, 0x35, 0x32, 0x8B, 0x0, 0x55, 0xBF, 0xF6, 0xC, 0xE4, 0x11, 0xC2, 0x45, 0x94, 0x4B, 0xA0, 0x53, 0x8D, 0x18, 0x28, 0xD1, 0x42, 0x5B, 0x6B, 0xCA, 0xD8, 0xE6, 0x56, 0x70, 0xEF, 0x48, 0x40, 0xD0, 0x97, 0x49, 0x5F, 0xA0, 0xFB, 0xF5, 0x4F, 0x8D, 0x4E, 0xF4, 0x41, 0x5B, 0xF2, 0x30, 0x16, 0x86, 0x1F, 0x93, 0xDE, 0x8A, 0xE8, 0xFC, 0x91, 0xC0, 0xFF, 0x84, 0x1, 0x50, 0x95, 0xE9, 0x44, 0x17, 0xE9, 0xF4, 0x30, 0x0, 0x2A, 0x6F, 0xDB, 0x92, 0x2A, 0x6F, 0x9A, 0x35, 0x23, 0x49, 0x6F, 0xB5, 0x4B, 0xA6, 0x8E, 0x4, 0xFA, 0xFB, 0xAC, 0xA5, 0xF8, 0xD8, 0x1, 0x88, 0x31, 0x93, 0x0, 0x39, 0xBB, 0xF7, 0x9, 0x48, 0x1, 0x61, 0x1D, 0x61, 0x1D, 0xA4, 0x90, 0xB3, 0x7B, 0x9F, 0x2, 0x88, 0xCA, 0x64, 0xBB, 0x33, 0x4A, 0xFD, 0x96, 0xB5, 0xDC, 0x38, 0x36, 0x11, 0x4, 0x41, 0x7E, 0x2F, 0xD2, 0x32, 0x30, 0x18, 0xF3, 0x32, 0x9B, 0x77, 0x9C, 0xB9, 0x24, 0x97, 0xAE, 0xEF, 0x3F, 0x46, 0x79, 0xDE, 0x52, 0xD, 0xAB, 0xE7, 0x1A, 0x63, 0x5A, 0x6D, 0x11, 0x0, 0xD8, 0xF0, 0xFD, 0x21, 0xA3, 0xBC, 0x7, 0x2E, 0xB4, 0x6A, 0xB0, 0xAC, 0x44, 0xB, 0xBA, 0xBF, 0x5F, 0x6, 0x30, 0x99, 0xCC, 0x4D, 0x51, 0x99, 0x4C, 0x98, 0xBC, 0x9F, 0x91, 0x30, 0x7A, 0xDE, 0xB6, 0x57, 0x7E, 0x37, 0x13, 0x43, 0x73, 0x55, 0xBC, 0x3, 0x86, 0x93, 0x5C, 0xFF, 0x9, 0x8A, 0x7C, 0x4E, 0xE9, 0xC1, 0x44, 0x36, 0x9B, 0x5D, 0x3B, 0x1E, 0x6F, 0x9B, 0xA2, 0x5C, 0x2E, 0xF7, 0xAD, 0x66, 0x5B, 0xA3, 0xA0, 0xB3, 0xC0, 0xCE, 0x9, 0xB8, 0x6B, 0xA0, 0x33, 0x3B, 0x76, 0xEF, 0xAD, 0x38, 0x39, 0x74, 0x58, 0xD7, 0x9E, 0xE7, 0x65, 0x43, 0x35, 0xE3, 0x18, 0x9D, 0x20, 0x62, 0x8, 0x69, 0xAE, 0x6B, 0xA5, 0x82, 0xE1, 0x2B, 0x91, 0x14, 0x53, 0x12, 0x95, 0x1C, 0xC7, 0xD9, 0x3E, 0x81, 0x91, 0x33, 0x9C, 0x12, 0x7E, 0x1, 0xBF, 0x62, 0xE3, 0xCD, 0x5D, 0x3C, 0x27, 0xA2, 0x0, 0x0, 0x0, 0x0, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
}
LPDIRECT3DTEXTURE9 setx;
LPDIRECT3DTEXTURE9 aimimgx;
LPDIRECT3DTEXTURE9 eyeimgx;

typedef HRESULT(__stdcall* DrawIndexedPrimitive_t)(IDirect3DDevice9*, D3DPRIMITIVETYPE, INT, UINT, UINT, UINT, UINT);
typedef HRESULT(__stdcall* Reset_t)(IDirect3DDevice9*, D3DPRESENT_PARAMETERS*);

HANDLE MEMORY = OpenProcess(PROCESS_ALL_ACCESS, 0, GetCurrentProcessId());

void InputHandler()
{
	for (int i = 0; i < 5; i++) ImGui::GetIO().MouseDown[i] = false;
	int button = -1;
	if (GetAsyncKeyState(VK_LBUTTON)) button = 0;
	if (button != -1) ImGui::GetIO().MouseDown[button] = true;
}

LPDIRECT3DTEXTURE9 img2;
LPDIRECT3DTEXTURE9 chamscolor;
void ToggleButton(const char* str_id, bool* v)
{
	ImVec2 p = ImGui::GetCursorScreenPos();
	ImDrawList* draw_list = ImGui::GetWindowDrawList();

	float height = ImGui::GetFrameHeight();
	float width = height * 1.55f;
	float radius = height * 0.50f;

	ImGui::InvisibleButton(str_id, ImVec2(width, height));
	if (ImGui::IsItemClicked())
		*v = !*v;

	float t = *v ? 1.0f : 0.0f;

	ImGuiContext& g = *GImGui;
	float ANIM_SPEED = 0.08f;
	if (g.LastActiveId == g.CurrentWindow->GetID(str_id))// && g.LastActiveIdTimer < ANIM_SPEED)
	{
		float t_anim = ImSaturate(g.LastActiveIdTimer / ANIM_SPEED);
		t = *v ? (t_anim) : (1.0f - t_anim);
	}

	ImU32 col_bg;
	if (ImGui::IsItemHovered())
		col_bg = ImGui::GetColorU32(ImLerp(ImVec4(0.78f, 0.78f, 0.78f, 1.0f), ImVec4(0.64f, 0.83f, 0.34f, 1.0f), t));
	else
		col_bg = ImGui::GetColorU32(ImLerp(ImVec4(0.85f, 0.85f, 0.85f, 1.0f), ImVec4(0.56f, 0.83f, 0.26f, 1.0f), t));

	draw_list->AddRectFilled(p, ImVec2(p.x + width, p.y + height), col_bg, height * 0.5f);
	draw_list->AddCircleFilled(ImVec2(p.x + radius + t * (width - radius * 2.0f), p.y + radius), radius - 1.5f, IM_COL32(255, 255, 255, 255));
}

HRESULT GenerateTexture(IDirect3DDevice9* pD3Ddev, IDirect3DTexture9** ppD3Dtex, DWORD colour32)
{
	pD3Ddev->CreateTexture(8, 8, 1, 0, D3DFMT_A4R4G4B4, D3DPOOL_MANAGED, ppD3Dtex, NULL);

	WORD colour16 = ((WORD)((colour32 >> 28) & 0xF) << 12)
		| (WORD)(((colour32 >> 20) & 0xF) << 8)
		| (WORD)(((colour32 >> 12) & 0xF) << 4)
		| (WORD)(((colour32 >> 4) & 0xF) << 0);

	D3DLOCKED_RECT d3dlr;
	(*ppD3Dtex)->LockRect(0, &d3dlr, 0, 0);
	WORD* pDst16 = (WORD*)d3dlr.pBits;

	for (int xy = 0; xy < 8 * 8; xy++)
		*pDst16++ = colour16;


	return S_OK;
}

D3DCOLOR FLOAT4TOD3DCOLOR(float Col[])
{
	ImU32 col32_no_alpha = ImGui::ColorConvertFloat4ToU32(ImVec4(Col[0], Col[1], Col[2], Col[3]));
	float a = (col32_no_alpha >> 24) & 255;
	float r = (col32_no_alpha >> 16) & 255;
	float g = (col32_no_alpha >> 8) & 255;
	float b = col32_no_alpha & 255;
	return D3DCOLOR_ARGB((int)a, (int)b, (int)g, (int)r);
}



extern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	if (Menu && ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))
	{
		return true;
	}

	return CallWindowProc(oWndProc, hWnd, msg, wParam, lParam);
}

IDirect3DPixelShader9* Front, * Back;
void Style()
{
	ImGuiStyle* style = &ImGui::GetStyle();
	ImVec4* colors = style->Colors;

	colors[ImGuiCol_Button] = ImVec4(0.79f, 0.79f, 0.79f, 1.00f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(0.85f, 0.85f, 0.85f, 1.00f);
	colors[ImGuiCol_ButtonActive] = ImVec4(0.85f, 0.85f, 0.85f, 1.00f);
}

HRESULT CreateMyShader(IDirect3DPixelShader9** pShader, IDirect3DDevice9* Device, float red, float green, float blue, float alpha)
{
	ID3DXBuffer* MyBuffer = NULL;
	char MyShader[256];
	sprintf(MyShader, "ps.1.1\ndef c0, %f, %f, %f, %f\nmov r0,c0", red / 255, green / 255, blue / 255, alpha / 255);
	D3DXAssembleShader(MyShader, sizeof(MyShader), NULL, NULL, 0, &MyBuffer, NULL);
	if (FAILED(Device->CreatePixelShader((const DWORD*)MyBuffer->GetBufferPointer(), pShader)))return E_FAIL;
	return S_OK;
}
HRESULT APIENTRY Present_hook(IDirect3DDevice9* pDevice, const RECT* pSourceRect, const RECT* pDestRect, HWND hDestWindowOverride, const RGNDATA* pDirtyRegion)
{

	if (GetAsyncKeyState(VK_INSERT) & 1) Menu = !Menu;
	static bool init = true;
	if (init)
	{
		init = false;
		ImGui::CreateContext();
		ImGuiIO& io = ImGui::GetIO();
		D3DDEVICE_CREATION_PARAMETERS d3dcp;
		pDevice->GetCreationParameters(&d3dcp);
		TargetWnd = d3dcp.hFocusWindow;
		if (TargetWnd != NULL)
		{
			oWndProc = (WNDPROC)SetWindowLongPtr(TargetWnd, GWLP_WNDPROC, (LONG_PTR)WndProc);
			ImGui_ImplWin32_Init(TargetWnd);
			ImGui_ImplDX9_Init(pDevice);
			ImFont* font = io.Fonts->AddFontFromMemoryTTF((void*)rawData, sizeof(rawData), 15);
			ImGui::GetIO().ImeWindowHandle = TargetWnd;
		}
		pDevice->GetViewport(&viewport);
		ScreenCenterX = viewport.Width / 2.0f;
		ScreenCenterY = viewport.Height / 2.0f;
	}

	if (eyeimgx == NULL)
		D3DXCreateTextureFromFileInMemory(pDevice, bytes::eyeimg, sizeof(bytes::eyeimg), &eyeimgx);

	if (aimimgx == NULL)
		D3DXCreateTextureFromFileInMemory(pDevice, bytes::aimimg, sizeof(bytes::aimimg), &aimimgx);

	if (setx == NULL)
		D3DXCreateTextureFromFileInMemory(pDevice, bytes::settings, sizeof(bytes::settings), &setx);

	ImGui_ImplDX9_NewFrame();
	ImGui_ImplWin32_NewFrame();
	ImGui::NewFrame();

	ImGuiStyle& style = ImGui::GetStyle();
	ImGuiColorEditFlags flags = ImGuiColorEditFlags_NoInputs;

	ImGui::GetIO().MouseDrawCursor = 1;
	if (Menu == true)
	{
		InputHandler();
		ImGui::SetNextWindowPos(ImVec2(40.0f, 40.0f)); 
		ImGui::SetNextWindowSize(ImVec2(600.0f, 420.0f)); 
		ImGui::Begin("NotSimpleBase - by 105HYP", 0, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoBringToFrontOnFocus);


		ImGui::SetCursorPosX(160); ImGui::SetCursorPosY(35);
		if (ImGui::Button("", ImVec2(425, 50)))
		{
			wallhack = !wallhack;
		}
		ImGui::SetWindowFontScale(1.4);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(42); ImGui::Text("WallHack");
		ImGui::SetWindowFontScale(0.8);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(60); ImGui::Text("Show enemies behind the wall.");
		ImGui::SetCursorPosX(530); ImGui::SetCursorPosY(50); ToggleButton("x", &wallhack);



		ImGui::SetCursorPosX(160); ImGui::SetCursorPosY(100);
		if (ImGui::Button(" ", ImVec2(425, 50)))
		{
			chams = !chams;
		}
		ImGui::SetWindowFontScale(1.4);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(107); ImGui::Text("Chams");
		ImGui::SetWindowFontScale(0.8);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(125); ImGui::Text("Paints the enemies behind the wall.");
		ImGui::SetCursorPosX(530); ImGui::SetCursorPosY(115); ToggleButton("a", &chams);


		ImGui::SetCursorPosX(160); ImGui::SetCursorPosY(165);
		if (ImGui::Button("  ", ImVec2(425, 50)))
		{
			espbox3d = !espbox3d;
		}
		ImGui::SetWindowFontScale(1.4);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(172); ImGui::Text("Esp Box");
		ImGui::SetWindowFontScale(0.8);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(190); ImGui::Text("Boxes enemies behind the wall.");
		ImGui::SetCursorPosX(530); ImGui::SetCursorPosY(180); ToggleButton("b", &espbox3d);


		ImGui::SetCursorPosX(160); ImGui::SetCursorPosY(230);
		if (ImGui::Button("   ", ImVec2(425, 50)))
		{
			lineesp = !lineesp;
		}
		ImGui::SetWindowFontScale(1.4);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(237); ImGui::Text("Esp Line");
		ImGui::SetWindowFontScale(0.8);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(255); ImGui::Text("Mark the enemies behind the wall with a line.");
		ImGui::SetCursorPosX(530); ImGui::SetCursorPosY(245); ToggleButton("c", &lineesp);


		ImGui::SetCursorPosX(160); ImGui::SetCursorPosY(295);
		if (ImGui::Button("    ", ImVec2(425, 50)))
		{
			distanceesp = !distanceesp;
		}
		ImGui::SetWindowFontScale(1.4);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(302); ImGui::Text("Esp Distance");
		ImGui::SetWindowFontScale(0.8);
		ImGui::SetCursorPosX(170); ImGui::SetCursorPosY(320); ImGui::Text("Show the distance of the enemies behind the wall.");
		ImGui::SetCursorPosX(530); ImGui::SetCursorPosY(310); ToggleButton("d", &distanceesp);


		ImGui::SetCursorPosX(0); ImGui::SetCursorPosY(0); ImGui::BeginChild("xd", ImVec2(150, 420));

		ImGui::SetWindowFontScale(1.6);
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(20); ImGui::Text("--- Visual");
		ImGui::SetCursorPosX(78); ImGui::SetCursorPosY(17); ImGui::Image(eyeimgx, ImVec2(24, 24));
		ImGui::SetWindowFontScale(1.3);
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(45); ImGui::Button("Player", ImVec2(135, 25));
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(78); ImGui::Button("BattleRoyale", ImVec2(135, 25));
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(108); ImGui::Button("Color & Settings", ImVec2(135, 25));

		ImGui::SetWindowFontScale(1.6);
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(150); ImGui::Text("--- AimBot");
		ImGui::SetCursorPosX(87); ImGui::SetCursorPosY(149); ImGui::Image(aimimgx, ImVec2(22, 22));
		ImGui::SetWindowFontScale(1.3);
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(177); ImGui::Button("AimBot", ImVec2(135, 25));

		ImGui::SetWindowFontScale(1.6);
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(220); ImGui::Text("--- Misc");
		ImGui::SetCursorPosX(70); ImGui::SetCursorPosY(218); ImGui::Image(setx, ImVec2(22, 22));
		ImGui::SetWindowFontScale(1.3);
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(246); ImGui::Button("Weapon", ImVec2(135, 25));
		ImGui::SetCursorPosX(20); ImGui::SetCursorPosY(279); ImGui::Button("Memory", ImVec2(135, 25));

		ImGui::GetIO().MouseDrawCursor = true;
		ImGui::End();
	}
	ImGui::GetIO().MouseDrawCursor = Menu;


	ImGui::EndFrame();
	ImGui::Render();
	ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());


	return Present_orig(pDevice, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);
}

HRESULT APIENTRY EndScene_hook(IDirect3DDevice9* pDevice)
{

	if (pDevice == nullptr) return EndScene_orig(pDevice); 
	{
		{

	}
}


	return EndScene_orig(pDevice);
}

HRESULT APIENTRY Reset_hook(IDirect3DDevice9* pDevice, D3DPRESENT_PARAMETERS* pPresentationParameters)
{
	ImGui_ImplDX9_InvalidateDeviceObjects();
	HRESULT ResetReturn = Reset_orig(pDevice, pPresentationParameters);
	ImGui_ImplDX9_CreateDeviceObjects();
	return ResetReturn;
}

IDirect3DVertexBuffer9* pStreamData;
UINT XOffset = 0;
UINT LStride = 0;
IDirect3DVertexShader9* vShader;
UINT vSize;
FILE* LOG;
char dllpath[255];
char logfile[255];
DWORD CSH;
HANDLE hProcces;

struct sscreen
{
	int height;
	int width;
}screen;


char* GetFile(char* file);
void  WriteFile(FILE* file, const char* fmt, ...);

HANDLE Process = OpenProcess(PROCESS_ALL_ACCESS, 0, GetCurrentProcessId());

DrawIndexedPrimitive_t OrigDrawIndexedPrimitive;
Reset_t OrigReset;

HRESULT __stdcall ResetHook(IDirect3DDevice9* Device, D3DPRESENT_PARAMETERS* Params)
{
	return OrigReset(Device, Params);
}

HRESULT GenerateShader(IDirect3DDevice9* Device, IDirect3DPixelShader9** Shader, float r, float g, float b)
{
	char ShaderAsmBuf[256];
	ID3DXBuffer* ShaderBuf = NULL;
	sprintf_s(ShaderAsmBuf, "ps_3_0\ndef c0, %f, %f, %f, %f\nmov oC0,c0", r, g, b, 1.0f);
	if (FAILED(D3DXAssembleShader(ShaderAsmBuf, (strlen(ShaderAsmBuf) + 1), NULL, NULL, 0, &ShaderBuf, NULL)))
	{
		return E_FAIL;
	}
	return Device->CreatePixelShader((const DWORD*)ShaderBuf->GetBufferPointer(), Shader);
}

bool DIPInit = true;
DWORD D3d9Base;
DWORD* D3d9VTable;
wchar_t DllPath[512];
wchar_t PathBuffer[512];
IDirect3DPixelShader9* RedShader;
IDirect3DPixelShader9* GreenShader;
IDirect3DTexture9* RedTexture;
IDirect3DTexture9* GreenTexture;


HRESULT APIENTRY DrawIndexedPrimitive_hook(IDirect3DDevice9* pDevice, D3DPRIMITIVETYPE Type, INT BaseVertexIndex, UINT MinVertexIndex, UINT NumVertices, UINT startIndex, UINT primCount)
{
	// TOP OF VISUALS

	if (DIPInit)
	{
		
		DIPInit = false;
	}

	if (SUCCEEDED(pDevice->GetVertexShader(&vShader)))
		if (vShader != NULL)
			if (SUCCEEDED(vShader->GetFunction(NULL, &vSize)))
				if (vShader != NULL) { vShader->Release(); vShader = NULL; }

	if(wallhack)
		if(Stride == 36 && vSize > 255 && NumVertices > 1160)
		{
			float bias = 1000.0f;
			float bias_float = static_cast<float>(-bias);
			bias_float /= 2000;//10000.0f;
			pDevice->SetRenderState(D3DRS_DEPTHBIAS, *(DWORD*)&bias_float);
			DrawIndexedPrimitive_orig(pDevice, Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
			pDevice->SetRenderState(D3DRS_DEPTHBIAS, 0);
		}

	if (chams)
		if (Stride == 36 && vSize > 255 && NumVertices > 1160)
		{
			pDevice->SetRenderState(D3DRS_ZENABLE, false);
			pDevice->SetTexture(0, chamscolor);
			DrawIndexedPrimitive_orig(pDevice, Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
			pDevice->SetTexture(0, chamscolor);
			pDevice->SetRenderState(D3DRS_ZENABLE, true);
		}
	
	HRESULT hRet = DrawIndexedPrimitive_orig(pDevice, Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);


	return DrawIndexedPrimitive_orig(pDevice, Type, BaseVertexIndex, MinVertexIndex, NumVertices, startIndex, primCount);
}


HRESULT APIENTRY SetStreamSource_hook(LPDIRECT3DDEVICE9 pDevice, UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT sStride)
{
	if (StreamNumber == 0)
		Stride = sStride;

	return SetStreamSource_orig(pDevice, StreamNumber, pStreamData, OffsetInBytes, sStride);
}

DWORD WINAPI Thread(LPVOID)
{

	while (!GetModuleHandleA("d3d9.dll")) {
		Sleep(200);
	}
	IDirect3D9* d3d = Direct3DCreate9(D3D_SDK_VERSION);
	IDirect3DDevice9* d3ddev = NULL;
	HWND tmpWnd = CreateWindowA("BUTTON", "DX", WS_SYSMENU | WS_MINIMIZEBOX, CW_USEDEFAULT, CW_USEDEFAULT, 300, 300, NULL, NULL, Hand, NULL);
	D3DPRESENT_PARAMETERS d3dpp;
	ZeroMemory(&d3dpp, sizeof(d3dpp));
	d3dpp.Windowed = TRUE;
	d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
	d3dpp.hDeviceWindow = tmpWnd;
	d3dpp.BackBufferFormat = D3DFMT_UNKNOWN;
	HRESULT result = d3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, tmpWnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &d3dpp, &d3ddev);
#if defined _M_X64
	DWORD64* dVtable = (DWORD64*)d3ddev;
	dVtable = (DWORD64*)dVtable[0];
#elif defined _M_IX86
	DWORD* dVtable = (DWORD*)d3ddev;
	dVtable = (DWORD*)dVtable[0];
#endif
	SetStreamSource_orig = (SetStreamSource)dVtable[100];
	DrawIndexedPrimitive_orig = (DrawIndexedPrimitive)dVtable[82];
	Present_orig = (Present)dVtable[17];
	EndScene_orig = (EndScene)dVtable[42];
	Reset_orig = (Reset)dVtable[16];
	Sleep(2000);
	DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourAttach(&(LPVOID&)SetStreamSource_orig, (PBYTE)SetStreamSource_hook);
	DetourAttach(&(LPVOID&)DrawIndexedPrimitive_orig, (PBYTE)DrawIndexedPrimitive_hook);
	DetourAttach(&(LPVOID&)Present_orig, (PBYTE)Present_hook);
	DetourAttach(&(LPVOID&)EndScene_orig, (PBYTE)EndScene_hook);
	DetourAttach(&(LPVOID&)Reset_orig, (PBYTE)Reset_hook);
	DetourTransactionCommit();
	d3ddev->Release();
	d3d->Release();
	DestroyWindow(tmpWnd);
	return 1;
}

BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, LPVOID lpvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH) {
		
		CreateThread(0, 0, Thread, 0, 0, 0);
	}
	return TRUE;
}